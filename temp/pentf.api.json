{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.12.1",
    "schemaVersion": 1003,
    "oldestForwardsCompatibleVersion": 1001
  },
  "kind": "Package",
  "canonicalReference": "pentf!",
  "docComment": "",
  "name": "pentf",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "pentf!",
      "name": "",
      "members": [
        {
          "kind": "TypeAlias",
          "canonicalReference": "pentf!A11yImpact:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type A11yImpact = "
            },
            {
              "kind": "Content",
              "text": "\"minor\" | \"moderate\" | \"serious\" | \"critical\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "A11yImpact",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "pentf!A11yNode:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface A11yNode "
            }
          ],
          "releaseTag": "Public",
          "name": "A11yNode",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!A11yNode#html:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "html: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "html",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!A11yNode#screenshots:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "screenshots: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!Buffer:class"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "screenshots",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!A11yNode#selectors:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "selectors: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "selectors",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "pentf!A11yResult:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface A11yResult "
            }
          ],
          "releaseTag": "Public",
          "name": "A11yResult",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!A11yResult#description:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "description: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "description",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!A11yResult#helpUrl:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "helpUrl?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "helpUrl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!A11yResult#impact:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "impact: "
                },
                {
                  "kind": "Reference",
                  "text": "A11yImpact",
                  "canonicalReference": "pentf!A11yImpact:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "impact",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!A11yResult#nodes:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "nodes: "
                },
                {
                  "kind": "Reference",
                  "text": "A11yNode",
                  "canonicalReference": "pentf!A11yNode:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "nodes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!assertAccessibility:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function assertAccessibility(config: "
            },
            {
              "kind": "Reference",
              "text": "TaskConfig",
              "canonicalReference": "pentf!TaskConfig:interface"
            },
            {
              "kind": "Content",
              "text": ", page: "
            },
            {
              "kind": "Reference",
              "text": "Page",
              "canonicalReference": "@types/puppeteer!Page:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<null | undefined>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "page",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "assertAccessibility"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!assertAlways:function(1)",
          "docComment": "/**\n * Assert that a condition remains true for the whole timeout.\n *\n * @param testfunc - The test function. Must return `true` to signal success.\n *\n * @param __namedParameters - Options (currently not visible in output due to typedoc bug)\n *\n * @param message - Error message shown if the testfunc fails.\n *\n * @param timeout - How long to wait, in milliseconds.\n *\n * @param checkEvery - Intervals between checks, in milliseconds.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function assertAlways(testfunc: "
            },
            {
              "kind": "Content",
              "text": "() => any"
            },
            {
              "kind": "Content",
              "text": ", { message, timeout, checkEvery }?: "
            },
            {
              "kind": "Content",
              "text": "{\n    message?: string | undefined;\n    timeout?: number | undefined;\n    checkEvery?: number | undefined;\n}"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "testfunc",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "{ message, timeout, checkEvery }",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "assertAlways"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!assertAsyncEventually:function(1)",
          "docComment": "/**\n * Assert that an asynchronously evaluated condition is eventually true.\n *\n * @param testfunc - The async test function. Must return `true` to signal success.\n *\n * @param __namedParameters - Options (currently not visible in output due to typedoc bug)\n *\n * @param message - Error message shown if the condition never becomes true within the timeout.\n *\n * @param timeout - How long to wait, in milliseconds.\n *\n * @param checkEvery - Intervals between checks, in milliseconds.\n *\n * @param crashOnError - `true` (default): A thrown error/exception is an immediate failure. `false`: A thrown error/exception is treated as if the test function returned false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function assertAsyncEventually(testfunc: "
            },
            {
              "kind": "Content",
              "text": "() => any"
            },
            {
              "kind": "Content",
              "text": ", { message, timeout, checkEvery, crashOnError }?: "
            },
            {
              "kind": "Content",
              "text": "{\n    message?: string | undefined;\n    timeout?: number | undefined;\n    checkEvery?: number | undefined;\n    crashOnError?: boolean | undefined;\n}"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "testfunc",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "{ message, timeout, checkEvery, crashOnError }",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "assertAsyncEventually"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!assertEventually:function(1)",
          "docComment": "/**\n * Assert that a condition is eventually true.\n *\n * @param testfunc - The test function. Must return `true` to signal success.\n *\n * @param __namedParameters - Options (currently not visible in output due to typedoc bug)\n *\n * @param message - Error message shown if the condition never becomes true within the timeout.\n *\n * @param timeout - How long to wait, in milliseconds.\n *\n * @param checkEvery - Intervals between checks, in milliseconds.\n *\n * @param crashOnError - `true` (default): A thrown error/exception is an immediate failure. `false`: A thrown error/exception is treated as if the test function returned false.\n *\n * @example\n * ```javascript\n * let called = false;\n * setTimeout(() => {called = true;}, 2000);\n * await assertEventually(() => called);\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function assertEventually(testfunc: "
            },
            {
              "kind": "Content",
              "text": "() => any"
            },
            {
              "kind": "Content",
              "text": ", { message, timeout, checkEvery, crashOnError }?: "
            },
            {
              "kind": "Content",
              "text": "{\n    message?: string | undefined;\n    timeout?: number | undefined;\n    checkEvery?: number | undefined;\n    crashOnError?: boolean | undefined;\n}"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "testfunc",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "{ message, timeout, checkEvery, crashOnError }",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "assertEventually"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!assertGreater:function(1)",
          "docComment": "/**\n * Assert `x < y`.\n *\n * @param x - The ostensibly larger value.\n *\n * @param y - The ostensibly smaller value.\n *\n * @param message - Optional error message if the assertion does not hold.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function assertGreater(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", y: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", message?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "y",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "message",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "assertGreater"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!assertHttpStatus:function(1)",
          "docComment": "/**\n * Assert that an HTTP response finished with the given status code.\n *\n * @param response - HTTP fetch response object, as gotten from `await `[[\"net_utils\".fetch|`netutils.fetch`]]`(...)`, or the promise resolving to that (e.g. just `[[\"net_utils\".fetch|`netutils.fetch`]]`(...)`).\n *\n * @param expectedStatus - The expected HTTP status (e.g. 201 for Created)\n *\n * @param __namedParameters - Options (currently not visible in output due to typedoc bug)\n *\n * @param message - Error message shown if the assertion fails.\n *\n * @returns {*} The fetch response object.\n *\n * @example\n * ```javascript\n * const response = await fetch(config, 'https://foo.example/');\n * await assertHttpStatus(response, 200);\n * // Or, the shorter form:\n * const shortResponse = await assertHttpStatus(fetch(config, 'https://foo.example/'));\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function assertHttpStatus(response: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ", expectedStatus?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", { message }?: "
            },
            {
              "kind": "Content",
              "text": "{\n    message?: undefined;\n}"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "response",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "expectedStatus",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "{ message }",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "assertHttpStatus"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!assertIncludes:function(1)",
          "docComment": "/**\n * Assert that a string is included in another, or object is included in an array.\n *\n * @param haystack - The thing to search in.\n *\n * @param needle - The thing to search for.\n *\n * @param message - Optional error message if the assertion does not hold.\n *\n * @example\n * ```javascript\n * assertIncludes('foobar', 'foo');\n * assertIncludes([9, 5, 3], 5);\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function assertIncludes(haystack: "
            },
            {
              "kind": "Content",
              "text": "string | any[]"
            },
            {
              "kind": "Content",
              "text": ", needle: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ", message?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "haystack",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "needle",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "message",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "assertIncludes"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!assertLess:function(1)",
          "docComment": "/**\n * Assert `x < y`.\n *\n * @param x - The ostensibly smaller value.\n *\n * @param y - The ostensibly larger value.\n *\n * @param message - Optional error message if the assertion does not hold.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function assertLess(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", y: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", message?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "y",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "message",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "assertLess"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!assertLessEqual:function(1)",
          "docComment": "/**\n * Assert `x <= y`.\n *\n * @param x - The ostensibly smaller or equal value.\n *\n * @param y - The ostensibly larger or equal value.\n *\n * @param message - Optional error message if the assertion does not hold.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function assertLessEqual(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", y: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", message?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "y",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "message",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "assertLessEqual"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!assertNotIncludes:function(1)",
          "docComment": "/**\n * Assert that a string is <b>not</b> included in another, or object is <b>not</b> included in an array.\n *\n * @param haystack - The thing to search in.\n *\n * @param needle - The thing to search for.\n *\n * @param message - Optional error message if the assertion does not hold.\n *\n * @example\n * ```javascript\n * assertNotIncludes('foobar', 'xxx');\n * assertNotIncludes([9, 5, 3], 2);\n * ```\n *\n * @template T\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function assertNotIncludes<T>(haystack: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ", needle: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ", message?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "haystack",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "needle",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "message",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "assertNotIncludes"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!assertNotSelector:function(1)",
          "docComment": "/**\n * Asserts that a selector is not present in the passed page or frame.\n *\n * @param page - puppeteer page object.\n *\n * @param selector - [CSS selector](https://www.w3.org/TR/2018/REC-selectors-3-20181106/#selectors) (aka query selector) of the targeted element.\n *\n * @param options - Options (currently not visible in output due to typedoc bug)\n *\n * @example\n * ```javascript\n * await assertNotSelector(page, 'div[data-id=\"foo\"] a.view', {message: 'Expected foo to not be present'});\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function assertNotSelector(page: "
            },
            {
              "kind": "Reference",
              "text": "PentfPage",
              "canonicalReference": "pentf!PentfPage:interface"
            },
            {
              "kind": "Content",
              "text": ", selector: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", { timeout, message }?: "
            },
            {
              "kind": "Reference",
              "text": "TimeoutOptions",
              "canonicalReference": "pentf!TimeoutOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "page",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "selector",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "{ timeout, message }",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "assertNotSelector"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!assertNotTestId:function(1)",
          "docComment": "/**\n * Asserts that an element identified by a test ID (`data-testid=` attribute) is not present in the passed page or frame.\n *\n * @param page - puppeteer page object.\n *\n * @param testId - The test ID to look for.\n *\n * @param options - \n *\n * @example\n * ```javascript\n * await assertNotTestId(page, 'foo', {message: 'Expected Test ID \"foo\" to not be present'});\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function assertNotTestId(page: "
            },
            {
              "kind": "Reference",
              "text": "Page",
              "canonicalReference": "@types/puppeteer!Page:interface"
            },
            {
              "kind": "Content",
              "text": ", testId: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", { timeout, message }?: "
            },
            {
              "kind": "Reference",
              "text": "TimeoutOptions",
              "canonicalReference": "pentf!TimeoutOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "page",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "testId",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "{ timeout, message }",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "assertNotTestId"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!assertNotXPath:function(1)",
          "docComment": "/**\n * Assert that there is currently no element matching the XPath on the page.\n *\n * @param page - puppeteer page object.\n *\n * @param xpath - XPath to search for.\n *\n * @param options - \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function assertNotXPath(page: "
            },
            {
              "kind": "Reference",
              "text": "Page",
              "canonicalReference": "@types/puppeteer!Page:interface"
            },
            {
              "kind": "Content",
              "text": ", xpath: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", options: "
            },
            {
              "kind": "Reference",
              "text": "AssertNotXPathOptions",
              "canonicalReference": "pentf!AssertNotXPathOptions:interface"
            },
            {
              "kind": "Content",
              "text": ", _timeout?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", _checkEvery?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "page",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "xpath",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "_timeout",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            },
            {
              "parameterName": "_checkEvery",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            }
          ],
          "name": "assertNotXPath"
        },
        {
          "kind": "Interface",
          "canonicalReference": "pentf!AssertNotXPathOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AssertNotXPathOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "AssertNotXPathOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!AssertNotXPathOptions#checkEvery:member",
              "docComment": "/**\n * Intervals between checks, in milliseconds.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "checkEvery?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "checkEvery",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!AssertNotXPathOptions#message:member",
              "docComment": "/**\n * Error message shown if the element is not visible in time.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "message?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "message",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!AssertNotXPathOptions#timeout:member",
              "docComment": "/**\n * How long to wait, in milliseconds. (Default: 2s)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timeout?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "timeout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!assertNumeric:function(1)",
          "docComment": "/**\n * Assert that a value is a Number or BigInt.\n *\n * @param x - The value to check.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function assertNumeric(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", message?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "message",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "assertNumeric"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!assertValue:function(1)",
          "docComment": "/**\n * Assert an `<input>` element having a certain value (after a wait if necessary).\n *\n * @param input - A puppeteer handle to an input element.\n *\n * @param expected - The value that is expected to be present.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function assertValue(input: "
            },
            {
              "kind": "Reference",
              "text": "ElementHandle",
              "canonicalReference": "@types/puppeteer!ElementHandle:interface"
            },
            {
              "kind": "Content",
              "text": ", expected: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "expected",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "assertValue"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!catchLater:function(1)",
          "docComment": "/**\n * Avoid `UnhandledPromiseRejectionWarning` if a promise fails before we `await` it.\n *\n * @param promise - A promise to ignore for now (will be caught later)\n *\n * @example\n * ```javascript\n * const emailPromise = catchLater(getMail(...));\n * await ...\n * const email = await emailPromise;\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function catchLater<T>(promise: "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "promise",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "catchLater"
        },
        {
          "kind": "Interface",
          "canonicalReference": "pentf!CheckEveryOption:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CheckEveryOption "
            }
          ],
          "releaseTag": "Public",
          "name": "CheckEveryOption",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!CheckEveryOption#checkEvery:member",
              "docComment": "/**\n * Intervals between checks, in milliseconds. (default: 200ms)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "checkEvery?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "checkEvery",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!clickNestedText:function(1)",
          "docComment": "/**\n * Click any element by its text content.\n *\n * The text can span multiple nodes compared to `clickText` which matches direct descended text nodes only.\n *\n * @param page - puppeteer page object.\n *\n * @param textOrRegExp - Text or regex to match the text that the element must contain.\n *\n * @param __namedParameters - Options (currently not visible in output due to typedoc bug)\n *\n * @param timeout - How long to wait, in milliseconds.\n *\n * @param checkEvery - Intervals between checks, in milliseconds. (default: 200ms)\n *\n * @param extraMessage - Optional error message shown if the element is not visible in time.\n *\n * @param visible - Optional check if element is visible (default: true)\n *\n * @param assertSuccess - Deprecated: Alias of retryUntil\n *\n * @param retryUntil - Additional check to verify that the operation was successful. This is needed in cases where a DOM node is present and we clicked on it, but the framework that rendered the node didn't set up any event listeners yet.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function clickNestedText(page: "
            },
            {
              "kind": "Reference",
              "text": "Page",
              "canonicalReference": "@types/puppeteer!Page:interface"
            },
            {
              "kind": "Content",
              "text": ", textOrRegExp: "
            },
            {
              "kind": "Content",
              "text": "string | "
            },
            {
              "kind": "Reference",
              "text": "RegExp",
              "canonicalReference": "!RegExp:interface"
            },
            {
              "kind": "Content",
              "text": ", { timeout, checkEvery, extraMessage, visible, assertSuccess, retryUntil }?: "
            },
            {
              "kind": "Reference",
              "text": "VisibleOption",
              "canonicalReference": "pentf!VisibleOption:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "RetryOptions",
              "canonicalReference": "pentf!RetryOptions:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "TimeoutOptions",
              "canonicalReference": "pentf!TimeoutOptions:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "CheckEveryOption",
              "canonicalReference": "pentf!CheckEveryOption:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "ExtraMessageOption",
              "canonicalReference": "pentf!ExtraMessageOption:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 16,
            "endIndex": 18
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "page",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "textOrRegExp",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            },
            {
              "parameterName": "{ timeout, checkEvery, extraMessage, visible, assertSuccess, retryUntil }",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 15
              }
            }
          ],
          "name": "clickNestedText"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!clickSelector:function(1)",
          "docComment": "/**\n * Clicks an element address ed by a query selector atomically, e.g. within the same event loop run as finding it.\n *\n * @param page - puppeteer page object.\n *\n * @param selector - [CSS selector](https://www.w3.org/TR/2018/REC-selectors-3-20181106/#selectors) (aka query selector) of the targeted element.\n *\n * @param options - \n *\n * @example\n * ```javascript\n * await clickSelector(page, 'div[data-id=\"foo\"] a.view', {message: 'Could not click foo link'});\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function clickSelector(page: "
            },
            {
              "kind": "Reference",
              "text": "PentfPage",
              "canonicalReference": "pentf!PentfPage:interface"
            },
            {
              "kind": "Content",
              "text": ", selector: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", { timeout, checkEvery, message, visible, assertSuccess, retryUntil }?: "
            },
            {
              "kind": "Reference",
              "text": "TimeoutOptions",
              "canonicalReference": "pentf!TimeoutOptions:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "RetryOptions",
              "canonicalReference": "pentf!RetryOptions:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "VisibleOption",
              "canonicalReference": "pentf!VisibleOption:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "CheckEveryOption",
              "canonicalReference": "pentf!CheckEveryOption:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "page",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "selector",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "{ timeout, checkEvery, message, visible, assertSuccess, retryUntil }",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 12
              }
            }
          ],
          "name": "clickSelector"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!clickTestId:function(1)",
          "docComment": "/**\n * Click an element identified by a test ID (`data-testid=` attribute). Selecting and clicking happens in the same tick, so this is safe to call even if the client application may currently be rerendering.\n *\n * @param page - The puppeteer page handle.\n *\n * @param testId - The test ID to look for.\n *\n * @param __namedParameters - Options (currently not visible in output due to typedoc bug)\n *\n * @param extraMessage - Optional error message shown if the element is not present in time.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function clickTestId(page: "
            },
            {
              "kind": "Reference",
              "text": "Page",
              "canonicalReference": "@types/puppeteer!Page:interface"
            },
            {
              "kind": "Content",
              "text": ", testId: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", { extraMessage, timeout, visible, assertSuccess, retryUntil }?: "
            },
            {
              "kind": "Reference",
              "text": "VisibleOption",
              "canonicalReference": "pentf!VisibleOption:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "TimeoutOptions",
              "canonicalReference": "pentf!TimeoutOptions:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "RetryOptions",
              "canonicalReference": "pentf!RetryOptions:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "ExtraMessageOption",
              "canonicalReference": "pentf!ExtraMessageOption:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "page",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "testId",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "{ extraMessage, timeout, visible, assertSuccess, retryUntil }",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 12
              }
            }
          ],
          "name": "clickTestId"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!clickText:function(1)",
          "docComment": "/**\n * Click a link, button, label, or input by its text content.\n *\n * @param page - puppeteer page object.\n *\n * @param text - Text that the element must contain.\n *\n * @param options - Options (currently not visible in output due to typedoc bug)\n *\n * @param extraMessage - Optional error message shown if the element is not visible in time.\n *\n * @param checkEvery - Intervals between checks, in milliseconds. (default: 200ms)\n *\n * @param elementXPath - \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function clickText(page: "
            },
            {
              "kind": "Reference",
              "text": "Page",
              "canonicalReference": "@types/puppeteer!Page:interface"
            },
            {
              "kind": "Content",
              "text": ", text: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", { timeout, checkEvery, elementXPath, extraMessage, assertSuccess, retryUntil }?: "
            },
            {
              "kind": "Reference",
              "text": "ClickTextOptions",
              "canonicalReference": "pentf!ClickTextOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "page",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "text",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "{ timeout, checkEvery, elementXPath, extraMessage, assertSuccess, retryUntil }",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "clickText"
        },
        {
          "kind": "Interface",
          "canonicalReference": "pentf!ClickTextOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ClickTextOptions extends "
            },
            {
              "kind": "Reference",
              "text": "TimeoutOptions",
              "canonicalReference": "pentf!TimeoutOptions:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "RetryOptions",
              "canonicalReference": "pentf!RetryOptions:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "CheckEveryOption",
              "canonicalReference": "pentf!CheckEveryOption:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ClickTextOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!ClickTextOptions#elementXPath:member",
              "docComment": "/**\n * XPath selector for the elements to match. By default matching `a`, `button`, `input`, `label`. `'//*'` to match any element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "elementXPath?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "elementXPath",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!ClickTextOptions#extraMessage:member",
              "docComment": "/**\n * Optional error message shown if the element is not visible in time.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "extraMessage?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "extraMessage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            },
            {
              "startIndex": 5,
              "endIndex": 7
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!clickXPath:function(1)",
          "docComment": "/**\n * Clicks an element addressed by XPath atomically, e.g. within the same event loop run as finding it.\n * ```javascript\n * await clickXPath(\n *     page, '//article[.//h1//text()[contains(., \"My form\")]]/button',\n *     {message: 'Could not find the button in the foobar form'}\n * );\n * ```\n *\n * @param page - puppeteer page object.\n *\n * @param xpath - XPath selector to match the element.\n *\n * @param options - Options\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function clickXPath(page: "
            },
            {
              "kind": "Reference",
              "text": "Page",
              "canonicalReference": "@types/puppeteer!Page:interface"
            },
            {
              "kind": "Content",
              "text": ", xpath: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "RetryOptions",
              "canonicalReference": "pentf!RetryOptions:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "TimeoutOptions",
              "canonicalReference": "pentf!TimeoutOptions:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "VisibleOption",
              "canonicalReference": "pentf!VisibleOption:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "CheckEveryOption",
              "canonicalReference": "pentf!CheckEveryOption:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "page",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "xpath",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 12
              }
            }
          ],
          "name": "clickXPath"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!closePage:function(1)",
          "docComment": "/**\n * Close a page (and its associated browser)\n *\n * @param page - puppeteer page object returned by `newPage`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function closePage(page: "
            },
            {
              "kind": "Reference",
              "text": "Page",
              "canonicalReference": "@types/puppeteer!Page:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "page",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "closePage"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!color:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function color(config: "
            },
            {
              "kind": "Reference",
              "text": "Config",
              "canonicalReference": "pentf!Config:interface"
            },
            {
              "kind": "Content",
              "text": ", colorName: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", str: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "colorName",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "str",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "color"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!connect:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function connect(config: "
            },
            {
              "kind": "Reference",
              "text": "Config",
              "canonicalReference": "pentf!Config:interface"
            },
            {
              "kind": "Content",
              "text": ", user: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "user",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "connect"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!customErrorMessage:function(1)",
          "docComment": "/**\n * Attach a custom error message if a promise fails. If the promise succeeds, this function does nothing.\n *\n * @param promise - The promise to wait for.\n *\n * @param message - Custom message to attach to the error;\n *\n * @example\n * ```javascript\n * const page = newPage(config);\n * await page.goto('https://example.org/');\n * await customErrorMessage(\n *     page.waitForSelector('blink'), '<blink> element not found (BUG-123)');\n * await closePage(page);\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function customErrorMessage<T>(promise: "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ", message: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "promise",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "parameterName": "message",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "customErrorMessage"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!detailedStatus:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function detailedStatus(config: "
            },
            {
              "kind": "Reference",
              "text": "Config",
              "canonicalReference": "pentf!Config:interface"
            },
            {
              "kind": "Content",
              "text": ", state: "
            },
            {
              "kind": "Reference",
              "text": "RunnerState",
              "canonicalReference": "pentf!RunnerState:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "state",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "detailedStatus"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!escapeXPathText:function(1)",
          "docComment": "/**\n * Construct an XPath expression for an arbitrary string.\n *\n * @param text - The text to encode. This can be user input or otherwise contain exotic characters.\n *\n * @example\n * ```javascript\n * const searchString = `'\"'`;\n * const page = await newPage(config);\n * await page.goto('https://github.com/boxine/pentf/blob/master/browser_utils.js');\n * await page.waitForXPath(`//div[@class=\"repository-content\"]//text()[contains(., ${escapeXPathText(searchString)})]`);\n * await closePage();\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function escapeXPathText(text: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "text",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "escapeXPathText"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!expectedToFail:function(1)",
          "docComment": "/**\n * Mark a code section as expected to fail. If the async function throws an error, the error will be included in reports, but not counted as a test failure. If the async function succeeds, a warning will be printed.\n *\n * @param config - The pentf configuration.\n *\n * @param message - Error message to show when the section fails (recommended: ticket URL)\n *\n * @param asyncFunc - The asynchronous section which is part of the test.\n *\n * @param __namedParameters - Options (currently not visible in output due to typedoc bug)\n *\n * @param expectNothing - Do nothing – this is convenient if the code is expected to work on some environments. (default: false)\n *\n * @example\n * ```\n * await expectedToFail(config, 'BUG-1234', async() => {\n *     ...\n * }, {\n *     expectNothing: config.env === 'very-good-environment',\n * });\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function expectedToFail(config: "
            },
            {
              "kind": "Reference",
              "text": "Config",
              "canonicalReference": "pentf!Config:interface"
            },
            {
              "kind": "Content",
              "text": ", message: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", asyncFunc: "
            },
            {
              "kind": "Content",
              "text": "() => any"
            },
            {
              "kind": "Content",
              "text": ", { expectNothing }?: "
            },
            {
              "kind": "Content",
              "text": "{\n    expectNothing?: boolean | undefined;\n}"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "message",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "asyncFunc",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "{ expectNothing }",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "expectedToFail"
        },
        {
          "kind": "Interface",
          "canonicalReference": "pentf!ExtraMessageOption:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ExtraMessageOption "
            }
          ],
          "releaseTag": "Public",
          "name": "ExtraMessageOption",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!ExtraMessageOption#extraMessage:member",
              "docComment": "/**\n * Optional error message shown if the element is not present in time.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "extraMessage?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "extraMessage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!fetch_2:function(1)",
          "docComment": "/**\n * fetch a URL. Apart from the first parameter, this implements the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API). (Using this method rather than another enables outputting of curl commands with `-c` and a couple of defaults suitable for pentf).\n *\n * @param config - The pentf configuration object.\n *\n * @param url - URL to fetch.\n *\n * @param init - fetch options, see [`RequestInit` in the Fetch Spec](https://fetch.spec.whatwg.org/#requestinit). On top of the standard Fetch parameters, we support the following nonstandard parameters: - `agent`: node [HTTP/HTTPS agent](https://nodejs.org/api/https.html#https_class_https_agent) - `curl_include_headers`: boolean (default false) of whether to include `-k` in the curl output. - `curl_extra_options`: List of extra options for the curl output. - `cookieJar`: A [CookieJar object](https://github.com/salesforce/tough-cookie/blob/master/README.md#cookiejar) to use. Pass in the string `'create'` to create a new one (returned as `response.cookieJar`). The response will have a utility function `async getCookieValue(name)` to quickly retrieve a cookie value from the jar.\n *\n * @example\n * ```javascript\n * const response = await fetch(config, 'https://example.org/json-api', {\n *     method: 'POST',\n *     headers: {\n *         'Content-Type': 'application/json',\n *     },\n *     body: JSON.stringify({\n *         key: 'value',\n *     }),\n * });\n * assert.strictEqual(response.status, 200);\n * const data = await response.json();\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function fetch<T = "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ">(config: "
            },
            {
              "kind": "Reference",
              "text": "Config",
              "canonicalReference": "pentf!Config:interface"
            },
            {
              "kind": "Content",
              "text": ", url: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", init: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PentfResponse",
              "canonicalReference": "pentf!PentfResponse:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "url",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "init",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "fetch_2"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!finish:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function finish(config: "
            },
            {
              "kind": "Reference",
              "text": "Config",
              "canonicalReference": "pentf!Config:interface"
            },
            {
              "kind": "Content",
              "text": ", state: "
            },
            {
              "kind": "Reference",
              "text": "RunnerState",
              "canonicalReference": "pentf!RunnerState:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "state",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "finish"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!formatA11yError:function(1)",
          "docComment": "/**\n * @private\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function formatA11yError(config: "
            },
            {
              "kind": "Reference",
              "text": "Config",
              "canonicalReference": "pentf!Config:interface"
            },
            {
              "kind": "Content",
              "text": ", violation: "
            },
            {
              "kind": "Reference",
              "text": "A11yResult",
              "canonicalReference": "pentf!A11yResult:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "violation",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "formatA11yError"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!formatError:function(1)",
          "docComment": "/**\n * Format the error\n *\n * @param config - Penf config object\n *\n * @param err - Error object to format\n *\n * @returns {Promise<string>}  @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function formatError(config: "
            },
            {
              "kind": "Reference",
              "text": "Config",
              "canonicalReference": "pentf!Config:interface"
            },
            {
              "kind": "Content",
              "text": ", err: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<string>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "err",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "formatError"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!generateDiff:function(1)",
          "docComment": "/**\n * Generates a diff to be printed in stdout\n *\n * @param config - The pentf configuration object.\n *\n * @param err - The error to generate the diff from\n *\n * @returns {string}  @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function generateDiff(config: "
            },
            {
              "kind": "Reference",
              "text": "Config",
              "canonicalReference": "pentf!Config:interface"
            },
            {
              "kind": "Content",
              "text": ", err: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "err",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "generateDiff"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!getAttribute:function(1)",
          "docComment": "/**\n * Retrieve attribute value of a DOM element.\n *\n * @param page - The puppeteer page handle.\n *\n * @param selector - Query selector for the element.\n *\n * @param name - Attribute name.\n *\n * @returns The attribute value\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getAttribute(page: "
            },
            {
              "kind": "Reference",
              "text": "Page",
              "canonicalReference": "@types/puppeteer!Page:interface"
            },
            {
              "kind": "Content",
              "text": ", selector: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", name: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<string>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "page",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "selector",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "name",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "getAttribute"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!getMail:function(1)",
          "docComment": "/**\n * Retrieve and delete an email.\n *\n * @param config - The pentf configuration object.\n *\n * @param since - Earliest time the email can be sent. (To avoid finding the email of a prior test.)\n *\n * @param to - receiveer email address (`config.email` if you have just one email address, often the result of `makeRandomEmail`)\n *\n * @param subjectContains - Search string for the subject.\n *\n * @param wait_times - How long to wait between checking email. By default, we wait about 3 minutes total.\n *\n * @returns {Object} Email object with `html` and `text` properties.\n *\n * @example\n * ```javascript\n * const email = makeRandomEmail(config, 'myTestCase');\n * const start = new Date();\n * await ... // register with email\n * const welcomeMail = await getMail(config, start, email, 'Welcome');\n * assert.strictEqual(welcomeMail.text.includes('Hello'));\n * assert.strictEqual(welcomeMail.html.includes('<p>Hello'));\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getMail(config: "
            },
            {
              "kind": "Reference",
              "text": "TaskConfig",
              "canonicalReference": "pentf!TaskConfig:interface"
            },
            {
              "kind": "Content",
              "text": ", since: "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": ", to: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", subjectContains: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", wait_times?: "
            },
            {
              "kind": "Content",
              "text": "number[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ParsedBody",
              "canonicalReference": "pentf!ParsedBody:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "since",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "to",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "subjectContains",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            },
            {
              "parameterName": "wait_times",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            }
          ],
          "name": "getMail"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!getSelectOptions:function(1)",
          "docComment": "/**\n * Get all options of a `<select>` as an array of strings. The selected option is suffixed with `(***)`.\n *\n * @param page - The puppeteer page handle.\n *\n * @param select - puppeteer handl eto the `<select>`.\n *\n * @returns e.g. `['Option A', 'Option B(***)', 'Option C']`\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getSelectOptions(page: "
            },
            {
              "kind": "Reference",
              "text": "Page",
              "canonicalReference": "@types/puppeteer!Page:interface"
            },
            {
              "kind": "Content",
              "text": ", select: "
            },
            {
              "kind": "Reference",
              "text": "ElementHandle",
              "canonicalReference": "@types/puppeteer!ElementHandle:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLSelectElement",
              "canonicalReference": "!HTMLSelectElement:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<string[]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "page",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "select",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              }
            }
          ],
          "name": "getSelectOptions"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!getText:function(1)",
          "docComment": "/**\n * Get the text content of a given DOM Element.\n *\n * @param page - The puppeteer page handle.\n *\n * @param selector - Query selector.\n *\n * @returns Text content of the selected element.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getText(page: "
            },
            {
              "kind": "Reference",
              "text": "Page",
              "canonicalReference": "@types/puppeteer!Page:interface"
            },
            {
              "kind": "Content",
              "text": ", selector: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<string>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "page",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "selector",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "getText"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!html2pdf:function(1)",
          "docComment": "/**\n * Render a HTML string as a PDF file.\n *\n * @param config - The pentf configuration object.\n *\n * @param path - PDF file name to write to.\n *\n * @param html - Full HTML document to render.\n *\n * @param modifyPage - An optional async function to modify the `page` object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function html2pdf(config: "
            },
            {
              "kind": "Reference",
              "text": "Config",
              "canonicalReference": "pentf!Config:interface"
            },
            {
              "kind": "Content",
              "text": ", path: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", html: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", modifyPage?: "
            },
            {
              "kind": "Content",
              "text": "(page: "
            },
            {
              "kind": "Reference",
              "text": "Page",
              "canonicalReference": "@types/puppeteer!Page:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "path",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "html",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "modifyPage",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 12
              }
            }
          ],
          "name": "html2pdf"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!interceptRequest:function(1)",
          "docComment": "/**\n * Intercept browser requests\n *\n * @param page - \n *\n * @param fn - \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function interceptRequest(page: "
            },
            {
              "kind": "Reference",
              "text": "PentfPage",
              "canonicalReference": "pentf!PentfPage:interface"
            },
            {
              "kind": "Content",
              "text": ", fn: "
            },
            {
              "kind": "Content",
              "text": "(request: "
            },
            {
              "kind": "Reference",
              "text": "Request",
              "canonicalReference": "@types/puppeteer!Request:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void> | void"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "page",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              }
            }
          ],
          "name": "interceptRequest"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!isTaskConfig:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isTaskConfig(x: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "x",
              "canonicalReference": "pentf!~x"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "TaskConfig",
              "canonicalReference": "pentf!TaskConfig:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isTaskConfig"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!lazyAssert:function(1)",
          "docComment": "/**\n * Assert function with a message that is generated on demand.\n *\n * @param value - The value to be asserted to be true.\n *\n * @param makeMessage - Function to generate the error message, should the value be false.\n *\n * @example\n * ```javascript\n * lazyAssert(obj?.foo?.bar, () => `Object is missing foo.bar. Full object: ${JSON.stringify(obj)}`);\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function lazyAssert(value: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", makeMessage: "
            },
            {
              "kind": "Content",
              "text": "() => string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "makeMessage",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "lazyAssert"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!log:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function log(config: "
            },
            {
              "kind": "Reference",
              "text": "Config",
              "canonicalReference": "pentf!Config:interface"
            },
            {
              "kind": "Content",
              "text": ", message: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "message",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "log"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!logTaskError:function(1)",
          "docComment": "/**\n * @private\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logTaskError(config: "
            },
            {
              "kind": "Reference",
              "text": "Config",
              "canonicalReference": "pentf!Config:interface"
            },
            {
              "kind": "Content",
              "text": ", task: "
            },
            {
              "kind": "Reference",
              "text": "Task",
              "canonicalReference": "pentf!Task:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "task",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "logTaskError"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!logVerbose:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logVerbose(config: "
            },
            {
              "kind": "Reference",
              "text": "Config",
              "canonicalReference": "pentf!Config:interface"
            },
            {
              "kind": "Content",
              "text": ", message: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "message",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "logVerbose"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!makeCurlCommand:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function makeCurlCommand(options: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ", url: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<string>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "url",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "makeCurlCommand"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!newPage:function(1)",
          "docComment": "/**\n * Launch a new browser with puppeteer, with a new page (=Tab). The browser is completely isolated from any other calls. Most interactions will be with the page, but you can get the browser using `await page.browser();`. For more information about the page object, see the [puppeteer API documentation](https://github.com/puppeteer/puppeteer/blob/master/docs/api.md).\n *\n * @param config - The pentf configuration object.\n *\n * @param chrome_args - Additional arguments for Chrome (optional).\n *\n * @returns The puppeteer page handle.\n *\n * @example\n * ```javascript\n * const page = await newPage(config);\n * await page.goto('https://example.org/');\n * await waitForText(page, 'More information');\n * await closePage(page);\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function newPage(config: "
            },
            {
              "kind": "Reference",
              "text": "TaskConfig",
              "canonicalReference": "pentf!TaskConfig:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Config",
              "canonicalReference": "pentf!Config:interface"
            },
            {
              "kind": "Content",
              "text": ", chrome_args?: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Page",
              "canonicalReference": "@types/puppeteer!Page:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "parameterName": "chrome_args",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "newPage"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!onTeardown:function(1)",
          "docComment": "/**\n * Add a callback to execute during the teardown phase of the test case.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function onTeardown(config: "
            },
            {
              "kind": "Reference",
              "text": "Config",
              "canonicalReference": "pentf!Config:interface"
            },
            {
              "kind": "Content",
              "text": ", callback: "
            },
            {
              "kind": "Reference",
              "text": "TeardownHook",
              "canonicalReference": "pentf!TeardownHook:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "callback",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "onTeardown"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!parseBody:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function parseBody(body: "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ParsedBody",
              "canonicalReference": "pentf!ParsedBody:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "body",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "parseBody"
        },
        {
          "kind": "Interface",
          "canonicalReference": "pentf!ParsedBody:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ParsedBody "
            }
          ],
          "releaseTag": "Public",
          "name": "ParsedBody",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!ParsedBody#header:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "header?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "header",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!ParsedBody#html:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "html: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "html",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!ParsedBody#subject:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subject: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "subject",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!ParsedBody#text:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "text: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!parseHeader:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function parseHeader(name: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", value: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "name",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "parseHeader"
        },
        {
          "kind": "Interface",
          "canonicalReference": "pentf!PentfBrowser:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PentfBrowser extends "
            },
            {
              "kind": "Reference",
              "text": "Browser",
              "canonicalReference": "@types/puppeteer!Browser:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "PentfBrowser",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!PentfBrowser#_connection:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_connection: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        send: (messge: string, options?: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, any>) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_connection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!PentfBrowser#_logs:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_logs: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_logs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!PentfBrowser#_pentf_config:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_pentf_config: "
                },
                {
                  "kind": "Reference",
                  "text": "TaskConfig",
                  "canonicalReference": "pentf!TaskConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_pentf_config",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "pentf!PentfPage:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PentfPage extends "
            },
            {
              "kind": "Reference",
              "text": "Page",
              "canonicalReference": "@types/puppeteer!Page:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "PentfPage",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!PentfPage#_pentf_intercept_handlers:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_pentf_intercept_handlers: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_pentf_intercept_handlers",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "pentf!PentfResponse:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PentfResponse extends "
            },
            {
              "kind": "Reference",
              "text": "Response",
              "canonicalReference": "!Response:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "PentfResponse",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!PentfResponse#cookieJar:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cookieJar?: "
                },
                {
                  "kind": "Content",
                  "text": "tough."
                },
                {
                  "kind": "Reference",
                  "text": "CookieJar",
                  "canonicalReference": "@types/tough-cookie!CookieJar:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "cookieJar",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!PentfResponse#getCookieValue:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getCookieValue?: "
                },
                {
                  "kind": "Content",
                  "text": "(name: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string | undefined>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "getCookieValue",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!proxyConsole:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function proxyConsole(config: "
            },
            {
              "kind": "Reference",
              "text": "Config",
              "canonicalReference": "pentf!Config:interface"
            },
            {
              "kind": "Content",
              "text": ", state: "
            },
            {
              "kind": "Reference",
              "text": "RunnerState",
              "canonicalReference": "pentf!RunnerState:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "() => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "state",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "proxyConsole"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!restoreTimeouts:function(1)",
          "docComment": "/**\n * Restore timeouts modified by [[speedupTimeouts]]\n *\n * @param page - The puppeteer page handle.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function restoreTimeouts(page: "
            },
            {
              "kind": "Reference",
              "text": "Page",
              "canonicalReference": "@types/puppeteer!Page:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "page",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "restoreTimeouts"
        },
        {
          "kind": "Interface",
          "canonicalReference": "pentf!RetryOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RetryOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "RetryOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!RetryOptions#assertSuccess:member",
              "docComment": "/**\n * @deprecated\n *\n * Use `retryUntil` instead\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "assertSuccess?: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "assertSuccess",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!RetryOptions#retryUntil:member",
              "docComment": "/**\n * Additional check to verify that the operation was successful. This is needed in cases where a DOM node is present and we clicked on it, but the framework that rendered the node didn't set up any event listeners yet.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "retryUntil?: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "retryUntil",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!run:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function run(config: "
            },
            {
              "kind": "Reference",
              "text": "Config",
              "canonicalReference": "pentf!Config:interface"
            },
            {
              "kind": "Content",
              "text": ", testCases: "
            },
            {
              "kind": "Reference",
              "text": "TestCase",
              "canonicalReference": "pentf!TestCase:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RunnerResult",
              "canonicalReference": "pentf!RunnerResult:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "testCases",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "name": "run"
        },
        {
          "kind": "Interface",
          "canonicalReference": "pentf!RunnerResult:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RunnerResult "
            }
          ],
          "releaseTag": "Public",
          "name": "RunnerResult",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!RunnerResult#cpuCount:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cpuCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "cpuCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!RunnerResult#pentfVersion:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pentfVersion: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pentfVersion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!RunnerResult#state:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "state: "
                },
                {
                  "kind": "Reference",
                  "text": "RunnerState",
                  "canonicalReference": "pentf!RunnerState:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "state",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!RunnerResult#test_end:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "test_end: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "test_end",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!RunnerResult#test_start:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "test_start: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "test_start",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!RunnerResult#testsVersion:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "testsVersion: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "testsVersion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "pentf!RunnerState:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RunnerState "
            }
          ],
          "releaseTag": "Public",
          "name": "RunnerState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!RunnerState#external_locking_failed:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "external_locking_failed?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "external_locking_failed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!RunnerState#external_locking_refresh_timeout:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "external_locking_refresh_timeout?: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeJS.Timeout",
                  "canonicalReference": "!NodeJS.Timeout:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "external_locking_refresh_timeout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!RunnerState#flakyCounts:member",
              "docComment": "/**\n * Track flakyness run count of a test\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flakyCounts: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "flakyCounts",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!RunnerState#last_logged_status:member",
              "docComment": "/**\n * The last status string that was logged to the console.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "last_logged_status?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "last_logged_status",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!RunnerState#locking_backoff:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "locking_backoff?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "locking_backoff",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!RunnerState#locks:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "locks?: "
                },
                {
                  "kind": "Reference",
                  "text": "Set",
                  "canonicalReference": "!Set:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "locks",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!RunnerState#pending_locks:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pending_locks?: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "pending_locks",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!RunnerState#remaining_teardowns:member",
              "docComment": "/**\n * Pending teardown hooks, most likely open browser windows that were kept open when a test failed\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "remaining_teardowns: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "remaining_teardowns",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!RunnerState#resultByTaskGroup:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resultByTaskGroup: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, "
                },
                {
                  "kind": "Reference",
                  "text": "TestResult",
                  "canonicalReference": "pentf!TestResult:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "resultByTaskGroup",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!RunnerState#running:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "running?: "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "running",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!RunnerState#tasks:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tasks: "
                },
                {
                  "kind": "Reference",
                  "text": "Task",
                  "canonicalReference": "pentf!Task:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "tasks",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!setLanguage:function(1)",
          "docComment": "/**\n * Configure the browser's language.\n *\n * @param page - The puppeteer page handle.\n *\n * @param lang - Either be a single string (e.g. \"en\") or an array of supported languages (e.g. `['de-DE', 'en-US', 'gr']`)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setLanguage(page: "
            },
            {
              "kind": "Reference",
              "text": "Page",
              "canonicalReference": "@types/puppeteer!Page:interface"
            },
            {
              "kind": "Content",
              "text": ", lang: "
            },
            {
              "kind": "Content",
              "text": "string | string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "page",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "lang",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "setLanguage"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!setupTLSClientAuth:function(1)",
          "docComment": "/**\n * Modify fetch options for a request authenticated with a client-side TLS certificate.\n *\n * @param fetchOptions - The fetch request option object to modify. (`init` parameter in [[fetch]] above)\n *\n * @param keyFilename - Name of the private key file in PEM format (e.g. beginning with `-----BEGIN RSA PRIVATE KEY-----`)\n *\n * @param certFilename - Name of the certificate file in PEM format (beginning with `-----BEGIN CERTIFICATE-----`)\n *\n * @param rejectUnauthorized - to validate the server's certificate, false (=default) to accept invalid certificates as well.\n *\n * @example\n * ```javascript\n * const init = {method: 'POST', body: '{\"something\": \"secret\"}'};\n * await setupTLSClientAuth(init, 'key.pem', 'cert.crt');\n * const response = await fetch(config, 'https://protected.example.org/', init);\n * assert.equal(response.status, 200); // 401 = invalid certificate\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setupTLSClientAuth(fetchOptions: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ", keyFilename: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", certFilename: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", rejectUnauthorized?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "fetchOptions",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "keyFilename",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "certFilename",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "rejectUnauthorized",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "setupTLSClientAuth"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!shouldShowError:function(1)",
          "docComment": "/**\n * @private\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function shouldShowError(config: "
            },
            {
              "kind": "Reference",
              "text": "Config",
              "canonicalReference": "pentf!Config:interface"
            },
            {
              "kind": "Content",
              "text": ", task: "
            },
            {
              "kind": "Reference",
              "text": "Task",
              "canonicalReference": "pentf!Task:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean | \"\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "task",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "shouldShowError"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!shutdown:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function shutdown(config: "
            },
            {
              "kind": "Reference",
              "text": "Config",
              "canonicalReference": "pentf!Config:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "shutdown"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!speedupTimeouts:function(1)",
          "docComment": "/**\n * Speed up all timeouts of calls to `setTimeout`/`setInterval`.\n *\n * @param page - The puppeteer page handle.\n *\n * @param __namedParameters - Options (currently not visible in output due to typedoc bug)\n *\n * @param number - ? factor Speedup factor (e.g. a timeout of 20 seconds with a speedup of 100 will fire after 200ms). (default: 100)\n *\n * @param boolean - ? persistent Whether this change should persist in case of page navigation. Set this if the next line is `await page.goto(..)` or similar. (default: false)\n *\n * @example\n * ```javascript\n * const page = await newPage(config);\n * await page.setContent('<div>Hello world</div>');\n * await speedupTimeouts(page, {factor: 1000});\n * await page.evaluate(() => {\n *     window.setTimeout(() => console.log(\"will log almost immediately\"), 2000);\n * });\n * await restoreTimeouts(page);\n * await page.evaluate(() => {\n *     window.setTimeout(() => console.log(\"will log after 2 seconds\"), 2000);\n * });\n * await closePage(page);\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function speedupTimeouts(page: "
            },
            {
              "kind": "Reference",
              "text": "Page",
              "canonicalReference": "@types/puppeteer!Page:interface"
            },
            {
              "kind": "Content",
              "text": ", { factor, persistent }?: "
            },
            {
              "kind": "Content",
              "text": "{\n    factor?: number | undefined;\n    persistent?: boolean | undefined;\n}"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "page",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "{ factor, persistent }",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "speedupTimeouts"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!status_2:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function status(config: "
            },
            {
              "kind": "Reference",
              "text": "Config",
              "canonicalReference": "pentf!Config:interface"
            },
            {
              "kind": "Content",
              "text": ", state: "
            },
            {
              "kind": "Reference",
              "text": "RunnerState",
              "canonicalReference": "pentf!RunnerState:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "state",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "status_2"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!stringify:function(1)",
          "docComment": "/**\n * Convert a value into a formatted string that can be used for comparisons. Contrary to `JSON.stringify(value, null, 2)` this will sort object properties which is necessary to get a meaningful diff.\n *\n * @param value - Value to stringify\n *\n * @returns {string}  @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function stringify(value: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ", level?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "level",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "stringify"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!takeScreenshot:function(1)",
          "docComment": "/**\n * @param config - \n *\n * @param page - The puppeteer page handle.\n *\n * @param fileName - Where to write the screenshot to\n *\n * @param selector - if specified only the element matching the selector will be screenshotted\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function takeScreenshot(config: "
            },
            {
              "kind": "Reference",
              "text": "Config",
              "canonicalReference": "pentf!Config:interface"
            },
            {
              "kind": "Content",
              "text": ", page: "
            },
            {
              "kind": "Reference",
              "text": "Page",
              "canonicalReference": "@types/puppeteer!Page:interface"
            },
            {
              "kind": "Content",
              "text": ", fileName: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", selector?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Buffer",
              "canonicalReference": "!Buffer:class"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "page",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "fileName",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "selector",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "takeScreenshot"
        },
        {
          "kind": "Interface",
          "canonicalReference": "pentf!Task:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Task "
            }
          ],
          "releaseTag": "Public",
          "name": "Task",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!Task#_runner_task_id:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_runner_task_id?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "_runner_task_id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!Task#accessibilityErrors:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accessibilityErrors: "
                },
                {
                  "kind": "Reference",
                  "text": "A11yResult",
                  "canonicalReference": "pentf!A11yResult:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "accessibilityErrors",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!Task#breadcrumb:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "breadcrumb?: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "breadcrumb",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!Task#duration:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "duration?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "duration",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!Task#error_screenshots:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error_screenshots?: "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!Buffer:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "error_screenshots",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!Task#error:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error?: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "error",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!Task#expectedToFail:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "expectedToFail?: "
                },
                {
                  "kind": "Content",
                  "text": "string | boolean | ((config: "
                },
                {
                  "kind": "Reference",
                  "text": "Config",
                  "canonicalReference": "pentf!Config:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => boolean)"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "expectedToFail",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!Task#group:member",
              "docComment": "/**\n * The name of the group this task belongs to. This is used for repeatFlaky\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "group: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "group",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!Task#id:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!Task#name:member",
              "docComment": "/**\n * Name of the task.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!Task#resources:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resources: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "resources",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!Task#skipReason:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "skipReason?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "skipReason",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!Task#start:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "start: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "start",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!Task#status:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "status: "
                },
                {
                  "kind": "Reference",
                  "text": "TaskStatus",
                  "canonicalReference": "pentf!TaskStatus:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "status",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!Task#tc:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tc: "
                },
                {
                  "kind": "Reference",
                  "text": "TestCase",
                  "canonicalReference": "pentf!TestCase:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "tc",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "pentf!TaskConfig:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TaskConfig extends "
            },
            {
              "kind": "Reference",
              "text": "Config",
              "canonicalReference": "pentf!Config:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "TaskConfig",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!TaskConfig#_breadcrumb:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_breadcrumb: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_breadcrumb",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!TaskConfig#_browser_pages:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_browser_pages: "
                },
                {
                  "kind": "Reference",
                  "text": "Page",
                  "canonicalReference": "@types/puppeteer!Page:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_browser_pages",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!TaskConfig#_taskGroup:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_taskGroup: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_taskGroup",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!TaskConfig#_taskName:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_taskName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_taskName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!TaskConfig#_teardown_hooks:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_teardown_hooks: "
                },
                {
                  "kind": "Reference",
                  "text": "TeardownHook",
                  "canonicalReference": "pentf!TeardownHook:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_teardown_hooks",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!TaskConfig#_testName:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_testName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_testName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!TaskConfig#accessibilityErrors:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accessibilityErrors: "
                },
                {
                  "kind": "Reference",
                  "text": "A11yResult",
                  "canonicalReference": "pentf!A11yResult:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "accessibilityErrors",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!TaskConfig#email_new_client:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "email_new_client?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "email_new_client",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!TaskConfig#start:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "start: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "start",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "pentf!TaskStatus:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TaskStatus = "
            },
            {
              "kind": "Content",
              "text": "\"success\" | \"running\" | \"error\" | \"todo\" | \"skipped\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "TaskStatus",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "pentf!TeardownHook:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TeardownHook = "
            },
            {
              "kind": "Content",
              "text": "(config: "
            },
            {
              "kind": "Reference",
              "text": "Config",
              "canonicalReference": "pentf!Config:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void> | void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "TeardownHook",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "pentf!TestCase:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TestCase "
            }
          ],
          "releaseTag": "Public",
          "name": "TestCase",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!TestCase#description:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "description: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "description",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!TestCase#expectedToFail:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "expectedToFail?: "
                },
                {
                  "kind": "Content",
                  "text": "string | boolean | ((config: "
                },
                {
                  "kind": "Reference",
                  "text": "Config",
                  "canonicalReference": "pentf!Config:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => boolean)"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "expectedToFail",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!TestCase#fileName:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fileName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "fileName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!TestCase#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!TestCase#path:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "path?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "path",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!TestCase#resources:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resources?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "resources",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!TestCase#run:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "run: "
                },
                {
                  "kind": "Content",
                  "text": "(config: "
                },
                {
                  "kind": "Reference",
                  "text": "TaskConfig",
                  "canonicalReference": "pentf!TaskConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void> | void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "run",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!TestCase#skip:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "skip?: "
                },
                {
                  "kind": "Content",
                  "text": "(config: "
                },
                {
                  "kind": "Reference",
                  "text": "Config",
                  "canonicalReference": "pentf!Config:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean> | boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "skip",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "pentf!TimeoutOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TimeoutOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "TimeoutOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!TimeoutOptions#message:member",
              "docComment": "/**\n * Error message shown if the element is not visible in time.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "message?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "message",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!TimeoutOptions#timeout:member",
              "docComment": "/**\n * How long to wait, in milliseconds.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timeout?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "timeout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!timeoutPromise:function(1)",
          "docComment": "/**\n * Raise an error if a promise does not finish within a certain timeframe. Note this does not cancel the promise itself (because that's impossible).\n *\n * @param config - The pentf configuration.\n *\n * @param promise - The promise to limit\n *\n * @param __namedParameters - Options (currently not visible in output due to typedoc bug)\n *\n * @returns {*} Whatever the promise returned, if it is successful\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function timeoutPromise<T>(config: "
            },
            {
              "kind": "Reference",
              "text": "Config",
              "canonicalReference": "pentf!Config:interface"
            },
            {
              "kind": "Content",
              "text": ", promise: "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ", { timeout, message, warning }?: "
            },
            {
              "kind": "Reference",
              "text": "TimeoutPromiseOptions",
              "canonicalReference": "pentf!TimeoutPromiseOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<T | undefined>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "promise",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            },
            {
              "parameterName": "{ timeout, message, warning }",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "timeoutPromise"
        },
        {
          "kind": "Interface",
          "canonicalReference": "pentf!TimeoutPromiseOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TimeoutPromiseOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "TimeoutPromiseOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!TimeoutPromiseOptions#message:member",
              "docComment": "/**\n * Optional error message to show when the timeout fires.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "message?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "message",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!TimeoutPromiseOptions#timeout:member",
              "docComment": "/**\n * Timeout in ms (by default 10000=10s)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timeout?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "timeout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!TimeoutPromiseOptions#warning:member",
              "docComment": "/**\n * Only print an error message, do not throw.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "warning?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "warning",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!typeSelector:function(1)",
          "docComment": "/**\n * Type text into an element identified by a query selector.\n *\n * @param page - puppeteer page object.\n *\n * @param selector - selector [CSS selector](https://www.w3.org/TR/2018/REC-selectors-3-20181106/#selectors) (aka query selector) of the element to type in.\n *\n * @param text - text to type\n *\n * @param options - \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function typeSelector(page: "
            },
            {
              "kind": "Reference",
              "text": "Page",
              "canonicalReference": "@types/puppeteer!Page:interface"
            },
            {
              "kind": "Content",
              "text": ", selector: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", text: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", { message, timeout }?: "
            },
            {
              "kind": "Reference",
              "text": "TimeoutOptions",
              "canonicalReference": "pentf!TimeoutOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "page",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "selector",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "text",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "{ message, timeout }",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "typeSelector"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!valueRepr:function(1)",
          "docComment": "/**\n * Generate a string representation for a random value.\n *\n * @param value - A random value.  @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function valueRepr(value: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "valueRepr"
        },
        {
          "kind": "Interface",
          "canonicalReference": "pentf!VisibleOption:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface VisibleOption "
            }
          ],
          "releaseTag": "Public",
          "name": "VisibleOption",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!VisibleOption#visible:member",
              "docComment": "/**\n * Whether the element must be visible within the timeout. (default: `true`)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "visible?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "visible",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!waitForTestId:function(1)",
          "docComment": "/**\n * Search for an element with the given `data-testid` attribute.\n *\n * @param page - puppeteer page object.\n *\n * @param testId - The test id to search\n *\n * @param options - Options\n *\n * @returns Handle to the element with the given test ID.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function waitForTestId(page: "
            },
            {
              "kind": "Reference",
              "text": "Page",
              "canonicalReference": "@types/puppeteer!Page:interface"
            },
            {
              "kind": "Content",
              "text": ", testId: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", { extraMessage, timeout, visible }?: "
            },
            {
              "kind": "Reference",
              "text": "WaitForTestIdOptions",
              "canonicalReference": "pentf!WaitForTestIdOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ElementHandle",
              "canonicalReference": "@types/puppeteer!ElementHandle:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "page",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "testId",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "{ extraMessage, timeout, visible }",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "waitForTestId"
        },
        {
          "kind": "Interface",
          "canonicalReference": "pentf!WaitForTestIdOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface WaitForTestIdOptions extends "
            },
            {
              "kind": "Reference",
              "text": "VisibleOption",
              "canonicalReference": "pentf!VisibleOption:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "ExtraMessageOption",
              "canonicalReference": "pentf!ExtraMessageOption:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "WaitForTestIdOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!WaitForTestIdOptions#timeout:member",
              "docComment": "/**\n * How long to wait, in milliseconds.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timeout?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "timeout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!waitForText:function(1)",
          "docComment": "/**\n * Wait for text to appear on the page.\n *\n * @param page - puppeteer page object.\n *\n * @param text - String to look for.\n *\n * @param options - \n *\n * @returns A handle to the text node.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function waitForText(page: "
            },
            {
              "kind": "Reference",
              "text": "Page",
              "canonicalReference": "@types/puppeteer!Page:interface"
            },
            {
              "kind": "Content",
              "text": ", text: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", { timeout, extraMessage }?: "
            },
            {
              "kind": "Reference",
              "text": "WaitForTextOptions",
              "canonicalReference": "pentf!WaitForTextOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ElementHandle",
              "canonicalReference": "@types/puppeteer!ElementHandle:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "page",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "text",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "{ timeout, extraMessage }",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "waitForText"
        },
        {
          "kind": "Interface",
          "canonicalReference": "pentf!WaitForTextOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface WaitForTextOptions extends "
            },
            {
              "kind": "Reference",
              "text": "ExtraMessageOption",
              "canonicalReference": "pentf!ExtraMessageOption:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "WaitForTextOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "pentf!WaitForTextOptions#timeout:member",
              "docComment": "/**\n * How long to wait, in milliseconds.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timeout?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "timeout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!waitForVisible:function(1)",
          "docComment": "/**\n * Wait for an element matched by a CSS query selector to become visible. Visible means the element has neither `display:none` nor `visibility:hidden`. Elements outside the current viewport (e.g. you'd need to scroll) and hidden with CSS trickery (opacity, overlaid with z-index, or permanently positioned outside the viewport) count as visible.\n *\n * @param page - puppeteer page object.\n *\n * @param selector - Query selector, e.g. `div > a[href=\"/\"]:visited`\n *\n * @param options - Options\n *\n * @returns A handle to the found element.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function waitForVisible(page: "
            },
            {
              "kind": "Reference",
              "text": "Page",
              "canonicalReference": "@types/puppeteer!Page:interface"
            },
            {
              "kind": "Content",
              "text": ", selector: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", { message, timeout }?: "
            },
            {
              "kind": "Reference",
              "text": "TimeoutOptions",
              "canonicalReference": "pentf!TimeoutOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ElementHandle",
              "canonicalReference": "@types/puppeteer!ElementHandle:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "page",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "selector",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "{ message, timeout }",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "waitForVisible"
        },
        {
          "kind": "Function",
          "canonicalReference": "pentf!workaround_setContent:function(1)",
          "docComment": "/**\n * @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function workaround_setContent(page: "
            },
            {
              "kind": "Reference",
              "text": "Page",
              "canonicalReference": "@types/puppeteer!Page:interface"
            },
            {
              "kind": "Content",
              "text": ", html: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "page",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "html",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "workaround_setContent"
        }
      ]
    }
  ]
}
